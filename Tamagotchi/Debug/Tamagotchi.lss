
Tamagotchi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000470  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800128  00800128  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001536  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9e  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000930  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b4  00000000  00000000  000037fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d1       	rcall	.+816    	; 0x3f4 <main>
  c4:	d3 c1       	rjmp	.+934    	; 0x46c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <clearBoard>:
void initBoard()
{
	clearBoard();
}
void clearBoard()
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	for (int i = 0; i<rowsize; i++){
  d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rowsize>
  d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rowsize+0x1>
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	9c f4       	brge	.+38     	; 0x104 <clearBoard+0x3c>
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(addressOfrow[i],	0 );
  e6:	f8 01       	movw	r30, r16
  e8:	81 91       	ld	r24, Z+
  ea:	8f 01       	movw	r16, r30
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0a d1       	rcall	.+532    	; 0x308 <write_data>
{
	clearBoard();
}
void clearBoard()
{
	for (int i = 0; i<rowsize; i++){
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rowsize>
  fa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rowsize+0x1>
  fe:	c8 17       	cp	r28, r24
 100:	d9 07       	cpc	r29, r25
 102:	8c f3       	brlt	.-30     	; 0xe6 <clearBoard+0x1e>
		write_data(addressOfrow[i],	0 );
		
	}
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <initBoard>:

char addressOfrow[8]= {0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E};

void initBoard()
{
	clearBoard();
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <clearBoard>
 110:	08 95       	ret

00000112 <startTamagotchi>:
		
	}
}

void startTamagotchi(){
	write_data(0x0e,0x1E);
 112:	6e e1       	ldi	r22, 0x1E	; 30
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	f6 d0       	rcall	.+492    	; 0x308 <write_data>
	write_data(0x02, 0x21);
 11c:	61 e2       	ldi	r22, 0x21	; 33
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	f1 d0       	rcall	.+482    	; 0x308 <write_data>
	write_data(0x04, 0xCA);
 126:	6a ec       	ldi	r22, 0xCA	; 202
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ec d0       	rcall	.+472    	; 0x308 <write_data>
	write_data(0x06, 0xD0 );
 130:	60 ed       	ldi	r22, 0xD0	; 208
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	e7 d0       	rcall	.+462    	; 0x308 <write_data>
	write_data(0x08, 0xD0);
 13a:	60 ed       	ldi	r22, 0xD0	; 208
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	e2 d0       	rcall	.+452    	; 0x308 <write_data>
	write_data(0x0A, 0xCA);
 144:	6a ec       	ldi	r22, 0xCA	; 202
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	dd d0       	rcall	.+442    	; 0x308 <write_data>
	write_data(0x0c, 0x21);
 14e:	61 e2       	ldi	r22, 0x21	; 33
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	d8 d0       	rcall	.+432    	; 0x308 <write_data>
	write_data(0x00,0x1E);
 158:	6e e1       	ldi	r22, 0x1E	; 30
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	d3 c0       	rjmp	.+422    	; 0x308 <write_data>
 162:	08 95       	ret

00000164 <sadTamagotchi>:
 164:	6e e1       	ldi	r22, 0x1E	; 30
}

void sadTamagotchi(){
	write_data(0x0e,0x1E);
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	cd d0       	rcall	.+410    	; 0x308 <write_data>
	write_data(0x02, 0x21);
 16e:	61 e2       	ldi	r22, 0x21	; 33
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	c8 d0       	rcall	.+400    	; 0x308 <write_data>
	write_data(0x04, 0xD2);
 178:	62 ed       	ldi	r22, 0xD2	; 210
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	c3 d0       	rcall	.+390    	; 0x308 <write_data>
	write_data(0x06, 0xC8 );
 182:	68 ec       	ldi	r22, 0xC8	; 200
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	be d0       	rcall	.+380    	; 0x308 <write_data>
	write_data(0x08, 0xC8);
 18c:	68 ec       	ldi	r22, 0xC8	; 200
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	b9 d0       	rcall	.+370    	; 0x308 <write_data>
	write_data(0x0A, 0xD2);
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	b4 d0       	rcall	.+360    	; 0x308 <write_data>
	write_data(0x0c, 0x21);
 1a0:	61 e2       	ldi	r22, 0x21	; 33
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	af d0       	rcall	.+350    	; 0x308 <write_data>
	write_data(0x00,0x1E);
 1aa:	6e e1       	ldi	r22, 0x1E	; 30
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	aa c0       	rjmp	.+340    	; 0x308 <write_data>
 1b4:	08 95       	ret

000001b6 <midTamagotchi>:
 1b6:	6e e1       	ldi	r22, 0x1E	; 30
}

void midTamagotchi(){
	write_data(0x0e,0x1E);
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	a4 d0       	rcall	.+328    	; 0x308 <write_data>
	write_data(0x02, 0x21);
 1c0:	61 e2       	ldi	r22, 0x21	; 33
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9f d0       	rcall	.+318    	; 0x308 <write_data>
	write_data(0x04, 0xCA);
 1ca:	6a ec       	ldi	r22, 0xCA	; 202
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9a d0       	rcall	.+308    	; 0x308 <write_data>
	write_data(0x06, 0xC8 );
 1d4:	68 ec       	ldi	r22, 0xC8	; 200
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	95 d0       	rcall	.+298    	; 0x308 <write_data>
	write_data(0x08, 0xC8);
 1de:	68 ec       	ldi	r22, 0xC8	; 200
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 d0       	rcall	.+288    	; 0x308 <write_data>
	write_data(0x0A, 0xCA);
 1e8:	6a ec       	ldi	r22, 0xCA	; 202
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8a e0       	ldi	r24, 0x0A	; 10
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	8b d0       	rcall	.+278    	; 0x308 <write_data>
	write_data(0x0c, 0x21);
 1f2:	61 e2       	ldi	r22, 0x21	; 33
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	86 d0       	rcall	.+268    	; 0x308 <write_data>
	write_data(0x00,0x1E);
 1fc:	6e e1       	ldi	r22, 0x1E	; 30
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	81 c0       	rjmp	.+258    	; 0x308 <write_data>
 206:	08 95       	ret

00000208 <initHealth>:
 208:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
}
void initHealth(){
	if (timer % 1000 == 0){
 20c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 210:	68 ee       	ldi	r22, 0xE8	; 232
 212:	73 e0       	ldi	r23, 0x03	; 3
 214:	04 d1       	rcall	.+520    	; 0x41e <__divmodhi4>
 216:	89 2b       	or	r24, r25
 218:	79 f4       	brne	.+30     	; 0x238 <initHealth+0x30>
		
		if (health <= 30 && health> 0){
 21a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <health>
 21e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <health+0x1>
 222:	9c 01       	movw	r18, r24
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	2e 31       	cpi	r18, 0x1E	; 30
 22a:	31 05       	cpc	r19, r1
 22c:	28 f4       	brcc	.+10     	; 0x238 <initHealth+0x30>
			health = health-5;
 22e:	05 97       	sbiw	r24, 0x05	; 5
 230:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <health+0x1>
 234:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <health>
			}if (health <= 0){
		}
	}
	
	if (health <=30 && health> 20){
 238:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <health>
 23c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <health+0x1>
 240:	45 97       	sbiw	r24, 0x15	; 21
 242:	0a 97       	sbiw	r24, 0x0a	; 10
		startTamagotchi();
 244:	28 f4       	brcc	.+10     	; 0x250 <initHealth+0x48>
		clear_lcd_screen();
 246:	65 df       	rcall	.-310    	; 0x112 <startTamagotchi>
		lcd_write_string("Im happy!");
 248:	b1 d0       	rcall	.+354    	; 0x3ac <clear_lcd_screen>
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	a0 d0       	rcall	.+320    	; 0x390 <lcd_write_string>
	}
	if (health <=  20 && health> 10){
 250:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <health>
 254:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <health+0x1>
 258:	0b 97       	sbiw	r24, 0x0b	; 11
		midTamagotchi();
 25a:	0a 97       	sbiw	r24, 0x0a	; 10
		clear_lcd_screen();
 25c:	28 f4       	brcc	.+10     	; 0x268 <initHealth+0x60>
 25e:	ab df       	rcall	.-170    	; 0x1b6 <midTamagotchi>
		lcd_write_string("Im Upset!");
 260:	a5 d0       	rcall	.+330    	; 0x3ac <clear_lcd_screen>
 262:	86 e1       	ldi	r24, 0x16	; 22
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	94 d0       	rcall	.+296    	; 0x390 <lcd_write_string>
	}
	if (health < 10 && health>0){
 268:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <health>
 26c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <health+0x1>
		sadTamagotchi();
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	09 97       	sbiw	r24, 0x09	; 9
		clear_lcd_screen();
 274:	28 f4       	brcc	.+10     	; 0x280 <initHealth+0x78>
 276:	76 df       	rcall	.-276    	; 0x164 <sadTamagotchi>
		lcd_write_string("Im sad!");
 278:	99 d0       	rcall	.+306    	; 0x3ac <clear_lcd_screen>
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	88 c0       	rjmp	.+272    	; 0x390 <lcd_write_string>
 280:	08 95       	ret

00000282 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 282:	84 ea       	ldi	r24, 0xA4	; 164
 284:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 288:	e4 e7       	ldi	r30, 0x74	; 116
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	88 23       	and	r24, r24
 290:	ec f7       	brge	.-6      	; 0x28c <twi_start+0xa>
 292:	08 95       	ret

00000294 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 294:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 298:	84 e8       	ldi	r24, 0x84	; 132
 29a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 29e:	e4 e7       	ldi	r30, 0x74	; 116
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 23       	and	r24, r24
 2a6:	ec f7       	brge	.-6      	; 0x2a2 <twi_tx+0xe>
}
 2a8:	08 95       	ret

000002aa <twi_init>:
inputs:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	TWSR = 0;
 2b0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	// Init HT16K22. Page 32 datasheet
	twi_start();
 2ba:	e3 df       	rcall	.-58     	; 0x282 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 2bc:	80 ee       	ldi	r24, 0xE0	; 224
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	e9 df       	rcall	.-46     	; 0x294 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	e6 df       	rcall	.-52     	; 0x294 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2c8:	c4 e7       	ldi	r28, 0x74	; 116
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	14 e9       	ldi	r17, 0x94	; 148
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 2ce:	18 83       	st	Y, r17
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2d0:	d8 df       	rcall	.-80     	; 0x282 <twi_start>
 2d2:	80 ee       	ldi	r24, 0xE0	; 224
 2d4:	90 e0       	ldi	r25, 0x00	; 0
	twi_tx(0xA0);	// HT16K33 pins all output
 2d6:	de df       	rcall	.-68     	; 0x294 <twi_tx>
 2d8:	80 ea       	ldi	r24, 0xA0	; 160
 2da:	90 e0       	ldi	r25, 0x00	; 0
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2dc:	db df       	rcall	.-74     	; 0x294 <twi_tx>
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();
	
	twi_start();
 2de:	18 83       	st	Y, r17
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2e0:	d0 df       	rcall	.-96     	; 0x282 <twi_start>
 2e2:	80 ee       	ldi	r24, 0xE0	; 224
 2e4:	90 e0       	ldi	r25, 0x00	; 0
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 2e6:	d6 df       	rcall	.-84     	; 0x294 <twi_tx>
 2e8:	83 ee       	ldi	r24, 0xE3	; 227
 2ea:	90 e0       	ldi	r25, 0x00	; 0
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2ec:	d3 df       	rcall	.-90     	; 0x294 <twi_tx>
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();
	
	twi_start();
 2ee:	18 83       	st	Y, r17
 2f0:	c8 df       	rcall	.-112    	; 0x282 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 2f2:	80 ee       	ldi	r24, 0xE0	; 224
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ce df       	rcall	.-100    	; 0x294 <twi_tx>
 2f8:	81 e8       	ldi	r24, 0x81	; 129
	twi_tx(0x81);	// Display OFF - Blink On
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	cb df       	rcall	.-106    	; 0x294 <twi_tx>
 2fe:	18 83       	st	Y, r17
 300:	df 91       	pop	r29
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 302:	cf 91       	pop	r28
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	
}
 304:	1f 91       	pop	r17
 306:	08 95       	ret

00000308 <write_data>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
	TWCR = (0x80 | 0x04);
	while( 0 == (TWCR & 0x80) );
}

void write_data(unsigned char adress,unsigned char data)
{
 30c:	d8 2f       	mov	r29, r24
 30e:	c6 2f       	mov	r28, r22
	twi_start();
 310:	b8 df       	rcall	.-144    	; 0x282 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 312:	80 ee       	ldi	r24, 0xE0	; 224
 314:	bf df       	rcall	.-130    	; 0x294 <twi_tx>
	twi_tx(adress);	// Address
 316:	8d 2f       	mov	r24, r29
 318:	bd df       	rcall	.-134    	; 0x294 <twi_tx>
	twi_tx(data);	// data
 31a:	8c 2f       	mov	r24, r28
 31c:	bb df       	rcall	.-138    	; 0x294 <twi_tx>
 31e:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 320:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 324:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(adress);	// Address
	twi_tx(data);	// data
	twi_stop();
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <lcd_strobe_lcd_e>:
 32a:	ab 9a       	sbi	0x15, 3	; 21
	PORTC = (byte<<4);
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void set_cursor(){
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_strobe_lcd_e+0x6>
 334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_strobe_lcd_e+0xc>
 336:	00 00       	nop
 338:	ab 98       	cbi	0x15, 3	; 21
 33a:	89 ef       	ldi	r24, 0xF9	; 249
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_strobe_lcd_e+0x14>
 342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_strobe_lcd_e+0x1a>
 344:	00 00       	nop
 346:	08 95       	ret

00000348 <init_4bits_mode>:
 348:	cf 93       	push	r28
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	84 bb       	out	0x14, r24	; 20
 34e:	15 ba       	out	0x15, r1	; 21
 350:	c0 e2       	ldi	r28, 0x20	; 32
 352:	c5 bb       	out	0x15, r28	; 21
 354:	ea df       	rcall	.-44     	; 0x32a <lcd_strobe_lcd_e>
 356:	c5 bb       	out	0x15, r28	; 21
 358:	e8 df       	rcall	.-48     	; 0x32a <lcd_strobe_lcd_e>
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	85 bb       	out	0x15, r24	; 21
 35e:	e5 df       	rcall	.-54     	; 0x32a <lcd_strobe_lcd_e>
 360:	15 ba       	out	0x15, r1	; 21
 362:	e3 df       	rcall	.-58     	; 0x32a <lcd_strobe_lcd_e>
 364:	80 ef       	ldi	r24, 0xF0	; 240
 366:	85 bb       	out	0x15, r24	; 21
 368:	e0 df       	rcall	.-64     	; 0x32a <lcd_strobe_lcd_e>
 36a:	15 ba       	out	0x15, r1	; 21
 36c:	de df       	rcall	.-68     	; 0x32a <lcd_strobe_lcd_e>
 36e:	80 e6       	ldi	r24, 0x60	; 96
 370:	85 bb       	out	0x15, r24	; 21
 372:	db df       	rcall	.-74     	; 0x32a <lcd_strobe_lcd_e>
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <lcd_write_data>:
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
 37c:	85 bb       	out	0x15, r24	; 21
 37e:	aa 9a       	sbi	0x15, 2	; 21
 380:	d4 df       	rcall	.-88     	; 0x32a <lcd_strobe_lcd_e>
 382:	c2 95       	swap	r28
 384:	c0 7f       	andi	r28, 0xF0	; 240
 386:	c5 bb       	out	0x15, r28	; 21
 388:	aa 9a       	sbi	0x15, 2	; 21
 38a:	cf df       	rcall	.-98     	; 0x32a <lcd_strobe_lcd_e>
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <lcd_write_string>:
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
 396:	88 81       	ld	r24, Y
 398:	88 23       	and	r24, r24
 39a:	29 f0       	breq	.+10     	; 0x3a6 <lcd_write_string+0x16>
 39c:	21 96       	adiw	r28, 0x01	; 1
 39e:	ec df       	rcall	.-40     	; 0x378 <lcd_write_data>
 3a0:	89 91       	ld	r24, Y+
 3a2:	81 11       	cpse	r24, r1
 3a4:	fc cf       	rjmp	.-8      	; 0x39e <lcd_write_string+0xe>
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <clear_lcd_screen>:
}
void clear_lcd_screen(){
 3ac:	cf 93       	push	r28
	PORTC = 0x01;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 3b2:	bb df       	rcall	.-138    	; 0x32a <lcd_strobe_lcd_e>

	PORTC = 0x02;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
	lcd_strobe_lcd_e();
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	b8 df       	rcall	.-144    	; 0x32a <lcd_strobe_lcd_e>
	
	
	PORTC = 0x1E;
 3ba:	ce e1       	ldi	r28, 0x1E	; 30
	lcd_strobe_lcd_e();
 3bc:	c5 bb       	out	0x15, r28	; 21
	PORTC = 0x1E;
	lcd_strobe_lcd_e();
 3be:	b5 df       	rcall	.-150    	; 0x32a <lcd_strobe_lcd_e>
	PORTC = 0x1E;
 3c0:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 3c2:	b3 df       	rcall	.-154    	; 0x32a <lcd_strobe_lcd_e>
	PORTC = 0x1E;
	lcd_strobe_lcd_e();
 3c4:	c5 bb       	out	0x15, r28	; 21
 3c6:	b1 df       	rcall	.-158    	; 0x32a <lcd_strobe_lcd_e>
	PORTC = 0x1E;
 3c8:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 3ca:	af df       	rcall	.-162    	; 0x32a <lcd_strobe_lcd_e>
 3cc:	c5 bb       	out	0x15, r28	; 21
	PORTC = 0x1E;
 3ce:	ad df       	rcall	.-166    	; 0x32a <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 3d0:	c5 bb       	out	0x15, r28	; 21
 3d2:	ab df       	rcall	.-170    	; 0x32a <lcd_strobe_lcd_e>
	
}
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <initMatrix>:
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
void initMatrix(void){
	twi_init();
 3d8:	68 df       	rcall	.-304    	; 0x2aa <twi_init>
	initBoard();
 3da:	99 de       	rcall	.-718    	; 0x10e <initBoard>
	init_4bits_mode();
 3dc:	b5 df       	rcall	.-150    	; 0x348 <init_4bits_mode>
 3de:	8f ef       	ldi	r24, 0xFF	; 255
	
	
	DDRA = 0b11111111;
 3e0:	8a bb       	out	0x1a, r24	; 26
 3e2:	ea e6       	ldi	r30, 0x6A	; 106

	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	80 83       	st	Z, r24
 3ec:	89 b7       	in	r24, 0x39	; 57
	EIMSK |= (1 << INT0);     // Turns on INT0
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	89 bf       	out	0x39, r24	; 57
 3f2:	08 95       	ret

000003f4 <main>:
 3f4:	f1 df       	rcall	.-30     	; 0x3d8 <initMatrix>
		DDRC &= ~(1<<PC0);
		timer++;
		
		
		if (PINC & (1<<PC0)==1){
			health = 30;
 3f6:	ce e1       	ldi	r28, 0x1E	; 30
	initMatrix();
	

	while(1){
		
		initHealth();
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
 3fa:	06 df       	rcall	.-500    	; 0x208 <initHealth>
		
		DDRC &= ~(1<<PC0);
 3fc:	a0 98       	cbi	0x14, 0	; 20
		timer++;
 3fe:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 402:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 40c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		
		
		if (PINC & (1<<PC0)==1){
 410:	98 9b       	sbis	0x13, 0	; 19
 412:	f3 cf       	rjmp	.-26     	; 0x3fa <main+0x6>
			health = 30;
 414:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <health+0x1>
 418:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <health>
 41c:	ee cf       	rjmp	.-36     	; 0x3fa <main+0x6>

0000041e <__divmodhi4>:
 41e:	97 fb       	bst	r25, 7
 420:	07 2e       	mov	r0, r23
 422:	16 f4       	brtc	.+4      	; 0x428 <__divmodhi4+0xa>
 424:	00 94       	com	r0
 426:	06 d0       	rcall	.+12     	; 0x434 <__divmodhi4_neg1>
 428:	77 fd       	sbrc	r23, 7
 42a:	08 d0       	rcall	.+16     	; 0x43c <__divmodhi4_neg2>
 42c:	0b d0       	rcall	.+22     	; 0x444 <__udivmodhi4>
 42e:	07 fc       	sbrc	r0, 7
 430:	05 d0       	rcall	.+10     	; 0x43c <__divmodhi4_neg2>
 432:	3e f4       	brtc	.+14     	; 0x442 <__divmodhi4_exit>

00000434 <__divmodhi4_neg1>:
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__divmodhi4_neg2>:
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255

00000442 <__divmodhi4_exit>:
 442:	08 95       	ret

00000444 <__udivmodhi4>:
 444:	aa 1b       	sub	r26, r26
 446:	bb 1b       	sub	r27, r27
 448:	51 e1       	ldi	r21, 0x11	; 17
 44a:	07 c0       	rjmp	.+14     	; 0x45a <__udivmodhi4_ep>

0000044c <__udivmodhi4_loop>:
 44c:	aa 1f       	adc	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	a6 17       	cp	r26, r22
 452:	b7 07       	cpc	r27, r23
 454:	10 f0       	brcs	.+4      	; 0x45a <__udivmodhi4_ep>
 456:	a6 1b       	sub	r26, r22
 458:	b7 0b       	sbc	r27, r23

0000045a <__udivmodhi4_ep>:
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	5a 95       	dec	r21
 460:	a9 f7       	brne	.-22     	; 0x44c <__udivmodhi4_loop>
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	bc 01       	movw	r22, r24
 468:	cd 01       	movw	r24, r26
 46a:	08 95       	ret

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
